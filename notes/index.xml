<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on </title>
    <link>https://azure-wings.github.io/wiki/notes/</link>
    <description>Recent content in Notes on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://azure-wings.github.io/wiki/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstract syntax</title>
      <link>https://azure-wings.github.io/wiki/notes/Abstract-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Abstract-syntax/</guid>
      <description>Abstract syntax formally express multiple components and subcomponents the program consists of.</description>
    </item>
    
    <item>
      <title>Alternating multilinear form</title>
      <link>https://azure-wings.github.io/wiki/notes/Alternating-multilinear-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Alternating-multilinear-form/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Artificial intelligence</title>
      <link>https://azure-wings.github.io/wiki/notes/Artificial-intelligence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Artificial-intelligence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Basis</title>
      <link>https://azure-wings.github.io/wiki/notes/Basis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Basis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cauchy-Schwartz Inequality</title>
      <link>https://azure-wings.github.io/wiki/notes/Cauchy-Schwartz-inequality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Cauchy-Schwartz-inequality/</guid>
      <description>Theorem For any vectors $\mathbf{x},\mathbf{y} \in \mathbb{R}^n$, $$ |\mathbf{x}^\top\mathbf{y}| \leq |\mathbf{x}|_2|\mathbf{y}|_2.</description>
    </item>
    
    <item>
      <title>Comparison between processes and threads</title>
      <link>https://azure-wings.github.io/wiki/notes/Comparison-between-processes-and-threads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Comparison-between-processes-and-threads/</guid>
      <description>Comparison      Processes  Threads     Switch Overhead High (CPU state + Memory, I/O state) Low (CPU state only)   Creation Cost High Low   CPU Protection Yes Yes   Memory, I/O Protection Yes No   Sharing Overhead High (Involves at leas a context switch) Low (Because thread switch overhead is low; may not need to switch context)   Sharing Security High (One process cannot corrupt the other) Low (A thread can write the memory used by another thread)    Diagrams </description>
    </item>
    
    <item>
      <title>Computer architecture</title>
      <link>https://azure-wings.github.io/wiki/notes/Computer-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Computer-architecture/</guid>
      <description>Computer architecture is a set of rules and methods that describe the functionality, organisation, and implementation of computer systems.</description>
    </item>
    
    <item>
      <title>Concrete syntax</title>
      <link>https://azure-wings.github.io/wiki/notes/Concrete-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Concrete-syntax/</guid>
      <description>Concrete syntax determines whether a certain string is a program or not.</description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>https://azure-wings.github.io/wiki/notes/Coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Coordinates/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cramer&#39;s rule</title>
      <link>https://azure-wings.github.io/wiki/notes/Cramers-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Cramers-rule/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determinant</title>
      <link>https://azure-wings.github.io/wiki/notes/Determinant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Determinant/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dimension</title>
      <link>https://azure-wings.github.io/wiki/notes/Dimension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Dimension/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dual-mode operation</title>
      <link>https://azure-wings.github.io/wiki/notes/Dual-mode-operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Dual-mode-operation/</guid>
      <description>Definition Dual-mode operation of a kernel consists of two modes: user mode and kernel mode.</description>
    </item>
    
    <item>
      <title>Field</title>
      <link>https://azure-wings.github.io/wiki/notes/Field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Field/</guid>
      <description>Definition A field $F$ is a set on which two operations $+$ (addition) and $\cdot$ (multiplication) are defined so that the followings hold.</description>
    </item>
    
    <item>
      <title>Fundamental theorem of linear algebra</title>
      <link>https://azure-wings.github.io/wiki/notes/Fundamental-theorem-of-linear-algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Fundamental-theorem-of-linear-algebra/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HÃ¶lder&#39;s Inequality</title>
      <link>https://azure-wings.github.io/wiki/notes/H%C3%B6lders-inequality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/H%C3%B6lders-inequality/</guid>
      <description>Theorem For any vectors $\mathbf{x},\mathbf{y} \in \mathbb{R}^n$ and for any $p,q \geq 1$ such that $\frac{1}{p} + \frac{1}{q} = 1$, it holds that $$ |\mathbf{x}^\top\mathbf{y}| \leq \sum\limits_{i=1}^n|x_iy_i| \leq |\mathbf{x}|_p|\mathbf{y}|_q.</description>
    </item>
    
    <item>
      <title>Implementation of mode transfer</title>
      <link>https://azure-wings.github.io/wiki/notes/Implementation-of-mode-transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Implementation-of-mode-transfer/</guid>
      <description>Importance The context switch ( mode transfer) must be carefully crafted, and it relies on hardware support.</description>
    </item>
    
    <item>
      <title>Inner product</title>
      <link>https://azure-wings.github.io/wiki/notes/Inner-product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Inner-product/</guid>
      <description>Definition An inner product on a vector space $V$ over a field is a function $\langle \cdot,\cdot\rangle:V^2 \to F$ that satisfies the followings:</description>
    </item>
    
    <item>
      <title>Isomorphism</title>
      <link>https://azure-wings.github.io/wiki/notes/Isomorphism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Isomorphism/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kernel thread</title>
      <link>https://azure-wings.github.io/wiki/notes/Kernel-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Kernel-thread/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linear algebra</title>
      <link>https://azure-wings.github.io/wiki/notes/Linear-algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Linear-algebra/</guid>
      <description>Linear algebra is the branch of mathematics concerning linear equations, linear transformations (maps), and their representations in vector spaces and through matrices.</description>
    </item>
    
    <item>
      <title>Linear transformation</title>
      <link>https://azure-wings.github.io/wiki/notes/Linear-transformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Linear-transformation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mathematical logic</title>
      <link>https://azure-wings.github.io/wiki/notes/Mathematical-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Mathematical-logic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MIPS Assembly language</title>
      <link>https://azure-wings.github.io/wiki/notes/MIPS-Assembly-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/MIPS-Assembly-language/</guid>
      <description>Operands and operations MIPS Operands  Registers(2^5 = 32): $s0-$s7, $t0-$t9, $zero, $a0-$a3, $v0-$v1, $gp, $fp, $sp, $ra, $at Memory words (2^30): Memory[X]  MIPS assembly language    Category Instruction Example Meaning     Arithmetic Add add $s1, $s2, $s3 $s1 = $s2 + $s3    Subtraction sub $s1, $s2, $s3 $s1 = $s2 - $s3    Add immediate addi $s1, $s2, 20 $s1 = $s2 + 20   Data Transfer Load word lw $s1, 20($s2) $s1 = Memory[$s2 + 20]    Store word sw $s1, 20($s2) Memory[$s2 + 20] = $s1    Load half lh     Load half unsigned lhu     Store half sh     Load byte lb     Load byte unsigned lbu     Store byte sb     Load linked word ll     Store condition.</description>
    </item>
    
    <item>
      <title>Mode transfer</title>
      <link>https://azure-wings.github.io/wiki/notes/Mode-transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Mode-transfer/</guid>
      <description>The operating system must provide a way to safely transfer between user mode and kernel mode.</description>
    </item>
    
    <item>
      <title>Multilinear form</title>
      <link>https://azure-wings.github.io/wiki/notes/Multilinear-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Multilinear-form/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Norm</title>
      <link>https://azure-wings.github.io/wiki/notes/Norm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Norm/</guid>
      <description>Intuition WIP
Definition A function $|\cdot|: V\to \mathbb{R}$ is a norm if it satisfies the followings:</description>
    </item>
    
    <item>
      <title>Operating systems</title>
      <link>https://azure-wings.github.io/wiki/notes/Operating-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Operating-systems/</guid>
      <description>Kernels and Processes   Process  Dual-mode operation  Mode transfer   Implementation of mode transfer  x86 Mode transfer    Secure system call  System upcalls  Concurrency and Threads   Thread   Comparison between processes and threads  Thread data structures  Thread life cycle  Kernel thread     </description>
    </item>
    
    <item>
      <title>Parsers</title>
      <link>https://azure-wings.github.io/wiki/notes/Parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Parsers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>https://azure-wings.github.io/wiki/notes/Performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Performance/</guid>
      <description>Defining Performance  Response time (execution time): The time between start and completion of a task Throughput (Bandwidth): The number of tasks completed per unit time  Measuring Performance  Clock cycle (s): The time for one clock period (usually the processor clock) - constant Clock rate (Hz): The inverse of clock period CPU execution time: The time CPU spends computing for a certain task (does not include time spent waiting for I/O or running other programs) $$ \begin{align*} \text{CPU time} &amp;amp;= \text{CPU clock cycles} \times \text{Clock cycle time}\ &amp;amp;= \frac{\text{CPU clock cycles}}{\text{Clock rate}} \end{align*} $$ CPI (Clock cycles per instruction): The average number of clock cycles per instruction for a program or program fragment.</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>https://azure-wings.github.io/wiki/notes/Process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Process/</guid>
      <description>A process is an instance of a program; it is the execution of a program with restricted rights.</description>
    </item>
    
    <item>
      <title>Programming language theory</title>
      <link>https://azure-wings.github.io/wiki/notes/Programming-language-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Programming-language-theory/</guid>
      <description>Programming language theory (PLT) is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of formal languages known as programming languages and of their individual features.</description>
    </item>
    
    <item>
      <title>Properties of determinant</title>
      <link>https://azure-wings.github.io/wiki/notes/Properties-of-determinant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Properties-of-determinant/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Secure system call</title>
      <link>https://azure-wings.github.io/wiki/notes/Secure-system-call/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Secure-system-call/</guid>
      <description>Importance The kernel must implement its system calls in a way that protects itself from all errors and attacks that might be launched by the misuse of the interface.</description>
    </item>
    
    <item>
      <title>Semantics</title>
      <link>https://azure-wings.github.io/wiki/notes/Semantics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Semantics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Set theory</title>
      <link>https://azure-wings.github.io/wiki/notes/Set-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Set-theory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Subspace</title>
      <link>https://azure-wings.github.io/wiki/notes/Subspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Subspace/</guid>
      <description>Definition  Let $V$ be a vector space over the field $F$.</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://azure-wings.github.io/wiki/notes/Syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Syntax/</guid>
      <description>Syntax of a programming language decides the apprearance of the language.</description>
    </item>
    
    <item>
      <title>System upcalls</title>
      <link>https://azure-wings.github.io/wiki/notes/System-upcalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/System-upcalls/</guid>
      <description>Necessity of System Upcalls To allow applications to implement operating system-like functionality, more than system call is required; applications can also benefit from being told when events occur that need their immediate attention.</description>
    </item>
    
    <item>
      <title>Thread</title>
      <link>https://azure-wings.github.io/wiki/notes/Thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Thread/</guid>
      <description>A thread is a single execution sequence that represents a separately schedulable task.</description>
    </item>
    
    <item>
      <title>Thread data structures</title>
      <link>https://azure-wings.github.io/wiki/notes/Thread-data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Thread-data-structures/</guid>
      <description>Per-Thread State and Thread Control Block (TCB) The operating system needs a data structure to represent a threads&amp;rsquo;s state.</description>
    </item>
    
    <item>
      <title>Thread life cycle</title>
      <link>https://azure-wings.github.io/wiki/notes/Thread-life-cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Thread-life-cycle/</guid>
      <description>Init  Thread creation thread_create() puts a thread into its init state and allocates and initialises per-thread data structures.</description>
    </item>
    
    <item>
      <title>Topology</title>
      <link>https://azure-wings.github.io/wiki/notes/Topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Topology/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vector space</title>
      <link>https://azure-wings.github.io/wiki/notes/Vector-space/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/Vector-space/</guid>
      <description>Definition A vector space $V$ over a field $F$ consists of a set on which two operations $+$ (addition) and $\cdot$ (scalar multiplication) are defined so that the followings hold.</description>
    </item>
    
    <item>
      <title>x86 Mode Transfer</title>
      <link>https://azure-wings.github.io/wiki/notes/x86-Mode-Transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure-wings.github.io/wiki/notes/x86-Mode-Transfer/</guid>
      <description>Background on x86 Architecture x86 is segmented, so pointers come in two parts.</description>
    </item>
    
  </channel>
</rss>
